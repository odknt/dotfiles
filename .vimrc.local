set autoindent
set smartindent
set showmode
set lazyredraw
set mouse=a
set guioptions=

"" Watchdogs:
let g:quickrun_config = {
    \   '_': {
    \       'runner': 'vimproc',
    \       'runner/vimproc/updatetime': 10
    \   },
    \   'watchdogs_checker/_': {
    \       'outputter/quickfix/open_cmd': '',
    \       'runner/vimproc/updatetime': 10
    \   },
    \   'vim/watchdogs_checker': {
    \       'type': executable('vint') ? 'watchdogs_checker/vint' : 'watchdogs_checker/vim-vimlint'
    \   },
    \   'watchdogs_checker/vint': {
    \       'command': 'vint',
    \       'exec': '%c %o %s:p'
    \   },
    \   'watchdogs_checker/php': {
    \       'command': 'php',
    \       'cmdopt':  '-l -d error_reporting=E_ALL -d display_errors=1 -d display_startup_errors=1 -d log_errors=0 -d xdebug.cli_color=0',
    \        'exec':    '%c %o %s:p',
    \        'errorformat': '%m\ in\ %f\ on\ line\ %l'
    \   }
    \ }

let $watchdogs_target = '*.js,*.ts,*.go,*.php,*.py,*.lua,*.vim*'
let g:watchdogs_check_CursorHold_enable = 1
let g:watchdogs_check_BufWritePost_enable = 1
augroup vimrc_local_watchdogs
    autocmd!
    autocmd BufNewFile,BufRead $watchdogs_target WatchdogsRunSilent
augroup END

"" Gtags:
"let g:unite_source_gtags_ref_option = 'r'
let g:unite_source_gtags_def_option = 'i'
"let g:unite_source_gtags_result_option = 'ctags-x'

"" Go:
filetype plugin indent on
syntax on
auto BufWritePre *.go Fmt
let $GOPATH = $GOPATH . globpath(getcwd(), '_vendor')
set completeopt=menu

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = 'goimports'
let g:go_fmt_fail_silently = 1

"" Bbye:
nnoremap <Leader>c :Bdelete<CR>

"" Tags: looks up and up
set tags=./tags;/,tags;/

"" Airline:
let g:airline_powerline_fonts = 1

"" Riot:
au BufRead,BufNewFile *.tag set filetype=javascript
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'

"" Markdown:
set syntax=markdown
au BufRead,BufNewFile *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown

"" Clipboard:
set clipboard=unnamed

"" Omni:
augroup vimrc_local_omni
    au!
    au FileType css setlocal omnifunc=csscomplete#CompleteCSS
    au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    au FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    au FileType python setlocal omnifunc=pythoncomplete#Complete
    au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END

"" Typescript:
" Watchdogs Option
let g:quickrun_config['watchdogs_checker/tslint'] = {
    \ 'command': 'tslint',
    \ 'exec': '%c %o %s:p',
    \ 'cmdopt': '--module commonjs'
    \ }
let g:quickrun_config['typescript/watchdogs_checker'] = {
    \ 'type': 'watchdogs_checker/tslint'
    \ }

"" Gvim:
" Disable italic
function! s:disable_italic()
    let l:his = ''
    redir => l:his
    silent hi
    redir END
    let l:his = substitute(l:his, '\n\s\+', ' ', 'g')
    for l:line in split(l:his, "\n")
        if l:line !~# ' links to ' && l:line !~# ' cleared$'
            exe 'hi' substitute(substitute(l:line, ' xxx ', ' ', ''), 'italic', 'none', 'g')
        endif
    endfor
endfunction
command! DisableItalic call s:disable_italic()

if has('vim_starting')
    call s:disable_italic()
endif

set guifont=Rounded\ M+\ 1m\ Medium\ 10
set novb

"" Tweet:
let s:tweetvim_update_interval_seconds = 60
let s:tweetvim_timestamp = reltime()[0]

function! s:tweetvim_autoupdate()
    let l:current = reltime()[0]
    if l:current - s:tweetvim_timestamp > s:tweetvim_update_interval_seconds
        call feedkeys("\<Plug>(tweetvim_action_reload)")
        let s:tweetvim_timestamp = l:current
    endif
    call feedkeys(mode() ==# 'i' ? "\<C-g>\<ESC>" : "g\<ESC>", 'n')
endfunction

function! s:tweetvim_setup_autoupdate()
    augroup vimrc_local_tweetvim_autoupdate
        au!
        au CursorHold * call <SID>tweetvim_autoupdate()
    augroup END
endfunction

command! -nargs=0 TweetVimAutoUpdate call <SID>tweetvim_setup_autoupdate()
command! -nargs=0 TweetVimStopAutoUpdate au! vimrc_local_tweetvim_autoupdate


"" Keymap:
let g:mapleader = ';'
nnoremap <C-c> :WatchdogsRunSilent<CR>
augroup vimrc_local_golang
    au!
    au FileType go nmap <leader>r <Plug>(go-run)
    au FileType go nmap <leader>b <Plug>(go-build)
    au FileType go nmap <leader>t <Plug>(go-test)
    au FileType go nmap <leader>c <Plug>(go-coverage)
    au FileType go nmap <Leader>ds <Plug>(go-def-split)
    au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
    au FileType go nmap <Leader>dt <Plug>(go-def-tab)
    au FileType go nmap <Leader>gd <Plug>(go-doc)
    au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
    au FileType go nmap <Leader>s <Plug>(go-implements)
    au FileType go nmap <Leader>i <Plug>(go-info)
    au FileType go nmap <Leader>e <Plug>(go-rename)
augroup END

"" Gtags_Keymap:
" Show function list in current file
nnoremap <C-l> :Unite gtags/file<CR>
" Grep
nnoremap <C-g> :Unite gtags/grep<CR>
" Show def under cursor
nnoremap <C-]> :Unite gtags/def<CR>
vnoremap <C-]> :Unite gtags/def<CR>
" Show ref under cursor
nnoremap <C-k> :Unite gtags/ref<CR>
vnoremap <C-k> :Unite gtags/ref<CR>
" Show all tokens
nnoremap <C-/> :Unite gtags/completion<CR>
