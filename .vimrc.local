set autoindent
set smartindent
set showmode
set ttyfast
set guioptions=

"" Gtags:
"let g:unite_source_gtags_ref_option = 'r'
let g:unite_source_gtags_def_option = 'i'
"let g:unite_source_gtags_result_option = 'ctags-x'

"" Go:
filetype plugin indent on
syntax on
auto BufWritePre *.go Fmt
let $GOPATH = $GOPATH . globpath(getcwd(), "_vendor")
set completeopt=menu

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1

"" Bbye:
nnoremap <Leader>c :Bdelete<CR>

"" Tags: looks up and up
set tags=./tags;/,tags;/

"" Airline:
let g:airline_powerline_fonts = 1

"" Markdown:
set syntax=markdown
au BufRead,BufNewFile *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown

"" Clipboard:
set clipboard=unnamed

"" Keymap:
let mapleader=";"
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)

"" Gtags_Keymap:
" Show function list in current file
nnoremap <C-l> :Unite gtags/file<CR>
" Grep
nnoremap <C-g> :Unite gtags/grep<CR>
" Show def under cursor
nnoremap <C-]> :Unite gtags/def<CR>
vnoremap <C-]> :Unite gtags/def<CR>
" Show ref under cursor
nnoremap <C-k> :Unite gtags/ref<CR>
vnoremap <C-k> :Unite gtags/ref<CR>
" Show all tokens
nnoremap <C-/> :Unite gtags/completion<CR>

"" Gvim:
" Disable italic
function! s:disable_italic()
    let his = ''
    redir => his
    silent hi
    redir END
    let his = substitute(his, '\n\s\+', ' ', 'g')
    for line in split(his, "\n")
        if line !~ ' links to ' && line !~ ' cleared$'
            exe 'hi' substitute(substitute(line, ' xxx ', ' ', ''), 'italic', 'none', 'g')
        endif
    endfor
endfunction
command! DisableItalic call s:disable_italic()
if has('vim_starting')
    call s:disable_italic()
endif

set guifont=Rounded\ M+\ 1m\ Medium\ 10
set novb
