#!/usr/bin/env python
# arguments: 1=Window ID, 2=Class, 3=Instance

import re
import subprocess
import sys

from typing import List, Optional, Type, TypeVar

T = TypeVar('T', bound='XProperty')

rWmWindowRole = r'(?<=WM_WINDOW_ROLE\(STRING\) = ").*(?=")'
rNetWmWindowType = r'(?<=_NET_WM_WINDOW_TYPE\(ATOM\) = ).*(?=)'
rLocation = r'(?<=program specified location: ).*(?=)'
rGravity = r'(?<=window gravity: ).*(?=)'


class Rule:
    def __init__(self, state: Optional[str] = None,
                 border: Optional[bool] = None):
        self.state = state
        self.border = border

    def __str__(self):
        rule: List[str] = []
        if self.state is not None:
            rule.append('state=%s' % self.state)
        if self.border is not None:
            rule.append('border=%s' % ('on' if self.border else 'off'))
        return ' '.join(rule)


class XProperty:
    def __init__(self, xprop: str):
        self.gravity = self.search(rGravity, xprop)
        self.location = self.search(rLocation, xprop)
        self.window_type = self.search(rNetWmWindowType, xprop)
        self.window_role = self.search(rWmWindowRole, xprop)

    @classmethod
    def xprop(cls: Type[T], wid: str) -> T:
        output = subprocess.check_output(['xprop', '-id', wid]).decode('utf-8')
        return cls(output)

    def search(self, regexp: str, text: str) -> str:
        match = re.search(rGravity, text)
        if match is None:
            return None
        return match.group(0)

    def is_dialog(self) -> bool:
        if self.window_type is None:
            return False
        return self.window_type == '_NET_WM_WINDOW_TYPE_DIALOG'

    def is_floating(self) -> bool:
        is_static = self.gravity is not None and self.gravity == 'Static'
        if is_static and self.location:
            return True

        if self.window_role == 'PictureInPicture':
            return True
        return False

    def rule(self) -> Rule:
        rule = Rule()

        if self.is_floating():
            rule.state = 'floating'
        elif self.is_dialog():
            rule.state = 'floating'
            rule.border = True

        if self.window_role == 'Popup':
            rule.border = False

        return rule


if __name__ == '__main__':
    print(XProperty.xprop(sys.argv[1]).rule())
