#!/usr/bin/env python3
# coding: utf-8

import alsaaudio
import configparser
import os
import select
import sys
import subprocess
import threading

from datetime import datetime
from signal import signal, SIGINT, SIGTERM, SIGUSR1, SIGQUIT, SIGHUP


conf           = configparser.SafeConfigParser()
streams        = []
panel_cmd      = '/bin/lemonbar -a 32 -n %s -g x%s -f %s -f %s -F %s -B %s -o %s -u %s'
pipe_r, pipe_w = os.pipe()
panel          = None
shell          = None
config         = os.path.dirname(os.path.realpath(__file__))+'/config.ini'
defpadding     = 0


def load_config(sig = None, stack = None):
    conf.optionxform = str
    conf.read(config)
    if 'general' not in conf:
        sys.exit(1)


def start_panel():
    global panel, shell
    if 'panel_cmd' in conf['general']:
        sys.exit(-1)

    cmd = panel_cmd % (conf['general']['wm_name'], conf['general']['height'],
                       conf['font']['global'], conf['font']['icons'],
                       conf['color']['default_fg'], conf['color']['default_bg'],
                       conf['general']['vertical_offset'], conf['general']['line_width'])

    panel = subprocess.Popen(cmd.strip().split(' '), stdin=pipe_r, stdout=subprocess.PIPE)
    shell = subprocess.Popen('/bin/sh', stdin=panel.stdout)

    subprocess.Popen(['bspc', 'config', 'top_padding', conf['general']['height']])


def exit(sig, stack):
    exit_panel()
    subprocess.Popen(['bspc', 'config', 'top_padding', defpadding])
    sys.exit()


def exit_panel():
    global panel, shell
    if shell is not None:
        shell.kill()
        shell = None

    if panel is not None:
        panel.kill()
        panel = None


def restart_panel(sig, stack):
    exit_panel()

    load_config()
    start_panel()


def send(info):
    global panel
    if panel is None:
        return

    os.write(pipe_w, info.encode('utf-8'))


def parse_monitor(line):
    wm = ''
    snum = 0
    dnum = 0
    for s in line.strip().split(':'):
        if s[0] in 'mM':
            if dnum > 1:
              snum += 1
            # fg = conf['color'][s[0]+'_fg']
            # bg = conf['color'][s[0]+'_bg']
            # wm += '%{{S{0}}}%{{F{1}}}%{{B{2}}}%{{A:bspc monitor -m {3} -f {4}:}}  {4}  %{{A}}%{{B-}}%{{F-}}'.format(snum, fg, bg, snum+1, s[1:])
            wm += '%{{S{0}}} '.format(snum)
            # reset
            dnum = 0

        elif s[0] in 'fF':
            fg = conf['color'][s[0]+'_fg']
            bg = conf['color'][s[0]+'_bg']
            name = '%{{B{0}}}%{{F{1}}} {2} %{{F-}}%{{B-}}'.format(bg, fg, "")
            target = subprocess.check_output(['bspc', 'query', '-D', '-m', '^{0}'.format(snum+1)]).decode('utf-8').splitlines()
            wm += '%{{A:bspc desktop -f {0}:}}{1}%{{A}}'.format(target[dnum], name)
            dnum += 1

        elif s[0] in 'oOuU':
            fg = conf['color'][s[0]+'_fg']
            bg = conf['color'][s[0]+'_bg']
            name = '%{{B{0}}}%{{F{1}}} {2} %{{F-}}%{{B-}}'.format(bg, fg, "")
            target = subprocess.check_output(['bspc', 'query', '-D', '-m', '^{0}'.format(snum+1)]).decode('utf-8').splitlines()
            wm += '%{{A:bspc desktop -f {0}:}}{1}%{{A}}'.format(target[dnum], name, fg)
            dnum += 1

        elif s[0] in 'LTG':
            wm += ''
    return wm


def get_output_per_monitor(str):
    lines = subprocess.check_output(['bspc', 'query', '-M'])

    output = ''
    for i in range(len(lines.splitlines())):
        output += '%{{S{0}}}{1}'.format(i, str)

    return output


def handler():
    if panel is None:
        return

    date, time, title, wm  = ('', '', '', '')

    while True:
        rstreams, _, _ = select.select(streams, [], [], 1.0)
        for stream in rstreams:
            line = stream.readline().decode('utf-8')
            if line.startswith('T'):
                title  = "%s" % line[1:-1]
            elif line.startswith('W'):
                wm = parse_monitor(line[1:-1])

        # date
        date = datetime.now().strftime('  %a %h %d')
        # time
        sys_prefix = '%{{B{0}}}%{{F{1}}}'.format(conf['color']['sys_bg'], conf['color']['sys_fg'])
        sys_suffix = '%{F-}%{B-}'
        time = datetime.now().strftime(sys_prefix+' %R  '+sys_suffix)
        # volume
        mix = alsaaudio.Mixer('Master')
        volume = mix.getvolume()[0]
        if 1 in mix.getmute():
            volume = '   off'
        else:
            volume = '   {0}%'.format(volume)

        left   = wm
        center = get_output_per_monitor(title)
        right  = get_output_per_monitor(volume + date + time)

        output = '%{{l}}{l}%{{c}}{c}%{{r}}{r}\n'.format(l=left, c=center, r=right)

        send(output)


def init():
    global defpadding

    signal(SIGINT,   exit)
    signal(SIGTERM,  exit)
    signal(SIGQUIT,  exit)

    # for reload config
    signal(SIGUSR1, load_config)
    signal(SIGHUP,  restart_panel)

    defpadding = subprocess.check_output(['bspc', 'config', 'top_padding']).decode('utf-8')


if __name__ == '__main__':
    init()
    load_config()
    start_panel()

    streams.append(subprocess.Popen(['xtitle', '-sf', 'T%s\n'], stdout=subprocess.PIPE).stdout)
    streams.append(subprocess.Popen(['bspc', 'subscribe', 'report'], stdout=subprocess.PIPE).stdout)

    handler()
