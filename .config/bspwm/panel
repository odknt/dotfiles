#!/usr/bin/env python
# -*- coding: utf-8 -*-

import alsaaudio
import codecs
import os
import select
import sys
import subprocess

from datetime import datetime
from signal import signal, SIGINT, SIGTERM, SIGUSR1, SIGQUIT, SIGHUP

try:
    import configparser
except:
    import ConfigParser as configparser


CONFIG = os.path.dirname(os.path.realpath(__file__))+'/config.ini'


def handle_utf8(data):
    """ unicode handling
    """
    if sys.version_info > (3, 0):
        return data.encode('utf-8')
    else:
        return data


class Panel:
    """ Panel class
    """

    def __init__(self):
        """ Initialize
        """
        self.conf = configparser.SafeConfigParser()
        self.cmd =  '/bin/lemonbar -a 32 -n %s -g x%s -f %s -f %s -F %s -B %s -o %s -u %s'
        self.streams = []
        self.p_panel = None
        self.p_shell = None
        self.defpadding = 0
        self.pipe_r, self.pipe_w = os.pipe()

        signal(SIGINT,   self.exit)
        signal(SIGTERM,  self.exit)
        signal(SIGQUIT,  self.exit)

        # for reload config
        signal(SIGUSR1, self.load_config)
        signal(SIGHUP,  self.restart_panel)

        self.defpadding = subprocess.check_output(['bspc', 'config', 'top_padding']).decode('utf-8')


    def load_config(self, sig = None, stack = None):
        """ Load configuration from a file
        """
        self.conf.optionxform = str
        try:
            self.conf.read(CONFIG)
        except configparser.Error as e:
            sys.stderr.write('Not found: %s' % CONFIG)
            sys.exit(-1)


    def start_panel(self):
        self.load_config()
        if self.conf.has_option('general', 'panel_cmd') is None:
            sys.exit(-1)

        panel_cmd = self.cmd % (self.conf.get('general', 'wm_name'), self.conf.get('general', 'height'),
                           self.conf.get('font', 'global'), self.conf.get('font', 'icons'),
                           self.conf.get('color', 'default_fg'), self.conf.get('color', 'default_bg'),
                           self.conf.get('general', 'vertical_offset'), self.conf.get('general', 'line_width'))

        self.panel = subprocess.Popen(panel_cmd.strip().split(' '), stdin=self.pipe_r, stdout=subprocess.PIPE)
        self.shell = subprocess.Popen('/bin/sh', stdin=self.panel.stdout)
        os.close(self.pipe_r)
        self.panel.stdout.close()

        subprocess.Popen(['bspc', 'config', 'top_padding', self.conf.get('general', 'height')])


    def exit(self, sig, stack):
        self.exit_panel()
        subprocess.Popen(['bspc', 'config', 'top_padding', self.defpadding])
        sys.exit()


    def exit_panel(self):
        if self.shell is not None:
            self.shell.kill()
            self.shell = None

        if self.panel is not None:
            self.panel.kill()
            self.panel = None


    def restart_panel(self, sig, stack):
        self.exit_panel()
        self.load_config()
        self.start_panel()


    def send(self, info):
        if self.panel is None:
            return
        os.write(self.pipe_w, handle_utf8(info))


    def parse_monitor(self, line):
        wm = ''
        snum = 0
        dnum = 0
        for s in line.strip().split(':'):
            if s[0] in 'mM':
                if dnum > 1:
                  snum += 1
                wm = '{0}%{{S{1}}} '.format(wm, snum)
                dnum = 0

            elif s[0] in 'fF':
                fg = self.conf.get('color', '{}_fg'.format(s[0]))
                bg = self.conf.get('color', '{}_bg'.format(s[0]))
                name = '%{{B{0}}}%{{F{1}}} {2} %{{F-}}%{{B-}}'.format(bg, fg, "")
                target = self.get_command_output(['bspc', 'query', '-D', '-m', '^{0}'.format(snum+1)]).decode('utf-8').splitlines()
                wm = '{0}%{{A:bspc desktop -f {1}:}}{2}%{{A}}'.format(wm, target[dnum], name)
                dnum += 1

            elif s[0] in 'oOuU':
                fg = self.conf.get('color', '{}_fg'.format(s[0]))
                bg = self.conf.get('color', '{}_bg'.format(s[0]))
                name = '%{{B{0}}}%{{F{1}}} {2} %{{F-}}%{{B-}}'.format(bg, fg, "")
                target = self.get_command_output(['bspc', 'query', '-D', '-m', '^{0}'.format(snum+1)]).decode('utf-8').splitlines()
                wm = '{0}%{{A:bspc desktop -f {1}:}}{2}%{{A}}'.format(wm, target[dnum], name)
                dnum += 1
        return wm


    def get_command_output(self, cmds):
        return subprocess.check_output(cmds)


    def get_output_per_monitor(self, str):
        lines = self.get_command_output(['bspc', 'query', '-M'])

        output = ''
        for i in range(len(lines.splitlines())):
            output = '{0}%{{S{1}}}{2}'.format(output, i, str)

        return output


    def handler(self):
        if self.panel is None:
            return

        date, time, title, wm  = ('', '', '', '')
        mix = alsaaudio.Mixer('Master')

        while True:
            rstreams, _, _ = select.select(self.streams, [], [], 1.0)
            for stream in rstreams:
                line = stream.readline().decode('utf-8')
                if line.startswith('T'):
                    title = "{}".format(line[1:-1]).replace('%', '%%')
                elif line.startswith('W'):
                    wm = self.parse_monitor(line[1:-1])

            # date
            date = datetime.now().strftime('  %a %h %d')
            # time
            sys_prefix = '%{{B{0}}}%{{F{1}}}'.format(self.conf.get('color', 'sys_bg'), self.conf.get('color', 'sys_fg'))
            sys_suffix = '%{F-}%{B-}'
            time = datetime.now().strftime('{} %R  {}'.format(sys_prefix, sys_suffix))
            # volume
            volume = mix.getvolume()[0]
            if 1 in mix.getmute():
                volume = '   off'
            else:
                volume = '   {0}%'.format(volume)

            left   = wm
            center = self.get_output_per_monitor(title)
            right  = self.get_output_per_monitor(''.join([volume, date, time]))

            output = '%{{l}}{0}%{{c}}{1}%{{r}}{2}\n'.format(left, center, right)

            self.send(output)


def main():
    panel = Panel()
    panel.start_panel()
    panel.streams.append(subprocess.Popen(['xtitle', '-sf', 'T%s\n'], stdout=subprocess.PIPE).stdout)
    panel.streams.append(subprocess.Popen(['bspc', 'subscribe', 'report'], stdout=subprocess.PIPE).stdout)
    panel.handler()


if __name__ == '__main__':
    main()
